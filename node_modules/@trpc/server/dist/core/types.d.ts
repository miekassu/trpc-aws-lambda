import { inferObservableValue } from '../observable';
import { AnyProcedure, ProcedureArgs } from './procedure';
import { AnyRouter, AnyRouterDef, Router } from './router';
export declare type inferRouterDef<TRouter extends AnyRouter> = TRouter extends Router<infer TParams> ? TParams extends AnyRouterDef<any> ? TParams : never : never;
export declare type inferRouterContext<TRouter extends AnyRouter> = inferRouterDef<TRouter>['_config']['$types']['ctx'];
export declare type inferRouterError<TRouter extends AnyRouter> = inferRouterDef<TRouter>['_config']['$types']['errorShape'];
export declare type inferRouterMeta<TRouter extends AnyRouter> = inferRouterDef<TRouter>['_config']['$types']['meta'];
export declare const procedureTypes: readonly ["query", "mutation", "subscription"];
/**
 * @public
 */
export declare type ProcedureType = typeof procedureTypes[number];
export declare type inferHandlerInput<TProcedure extends AnyProcedure> = ProcedureArgs<inferProcedureParams<TProcedure>>;
export declare type inferProcedureInput<TProcedure extends AnyProcedure> = inferHandlerInput<TProcedure>[0];
export declare type inferProcedureParams<TProcedure> = TProcedure extends AnyProcedure ? TProcedure['_def'] : never;
export declare type inferProcedureOutput<TProcedure> = inferProcedureParams<TProcedure>['_output_out'];
export declare type inferSubscriptionOutput<TRouter extends AnyRouter, TPath extends keyof TRouter['_def']['subscriptions'] & string> = inferObservableValue<inferProcedureOutput<TRouter['_def']['subscriptions'][TPath]>>;
export declare type inferProcedureClientError<TProcedure extends AnyProcedure> = inferProcedureParams<TProcedure>['_config']['errorShape'];
export declare type GetInferenceHelpers<TRouter extends AnyRouter> = {
    [TKey in keyof TRouter['_def']['record']]: TRouter['_def']['record'][TKey] extends infer TRouterOrProcedure ? TRouterOrProcedure extends AnyRouter ? GetInferenceHelpers<TRouterOrProcedure> : TRouterOrProcedure extends AnyProcedure ? {
        input: inferProcedureInput<TRouterOrProcedure>;
        output: inferProcedureOutput<TRouterOrProcedure>;
    } : never : never;
};
//# sourceMappingURL=types.d.ts.map