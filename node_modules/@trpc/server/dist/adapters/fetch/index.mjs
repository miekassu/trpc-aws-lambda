import { r as resolveHTTPResponse } from '../../resolveHTTPResponse-9dff3dcc.mjs';
import '../../transformTRPCResponse-23e99f82.mjs';
import '../../TRPCError-e99e7cbe.mjs';
import '../../codes-7d21f749.mjs';
import '../../index-0332d528.mjs';

async function fetchRequestHandler(opts) {
    const createContext = async ()=>{
        return opts.createContext?.({
            req: opts.req
        });
    };
    const url = new URL(opts.req.url);
    const path = url.pathname.slice(opts.endpoint.length + 1);
    const req = {
        query: url.searchParams,
        method: opts.req.method,
        headers: Object.fromEntries(opts.req.headers),
        body: await opts.req.text()
    };
    const result = await resolveHTTPResponse({
        req,
        createContext,
        path,
        router: opts.router,
        batching: opts.batching,
        responseMeta: opts.responseMeta,
        onError (o) {
            opts?.onError?.({
                ...o,
                req: opts.req
            });
        }
    });
    const res = new Response(result.body, {
        status: result.status
    });
    for (const [key, value] of Object.entries(result.headers ?? {})){
        if (typeof value === 'undefined') {
            continue;
        }
        if (typeof value === 'string') {
            res.headers.set(key, value);
            continue;
        }
        for (const v of value){
            res.headers.append(key, v);
        }
    }
    return res;
}

export { fetchRequestHandler };
